quarkus.application.name=mcp
quarkus.http.port=9080
quarkus.ssl.native=true
quarkus.native.additional-build-args=--initialize-at-run-time=org.apache.commons.lang3.RandomStringUtils
#don't add /ngsi-ld/v1/<something> here only base ip + port
ngsild.broker.baseurl=http://localhost:9090

mcp.query.description=This method is associated to the operation NGSI-LD "Query Entities" providing entities in the response payload body.
mcp.query.attrs=Name: attrs, Data Type: Comma separated list of strings, Cardinality: 0..1, Remarks: A synonym for a combination of the pick and q members. Deprecated. Each String is an Attribute (Property or Relationship) name. List of Attributes to be matched by the Entities and also included in the response, i.e. only Entities that contain at least one of the Attributes in attrs are to be included in the response, and only the Attributes listed in attrs are to be included in each of the Entities of the response.
mcp.query.coordinates=Name: coordinates, Data Type: String, Cardinality: 0..1, Remarks: Coordinates serialized as a string as per clause 4.10 [GeoJSON coordinates format - Coordinates shall be encoded using GeoJSON format as per IETF RFC 7946]. It is part of geoquery.
mcp.query.csf=Name: csf, Data Type: String, Cardinality: 0..1, Remarks: Context Source filter as per clause 4.9 [Query Language - Allows filtering on Context Source registrations using the same query language as for entities].
mcp.query.datasetId=Name: datasetId, Data Type: Comma separated list of strings, Cardinality: 0..1, Remarks: Shall be valid URIs, "@none" for including the default Attribute instances. Specifies the datasetIds of the Attribute instances to be selected for each matched Attribute as per clause 4.5.5 [Multiple Attribute instances - Defines how to handle multiple instances of the same attribute with different dataset IDs].
mcp.query.geometry=Name: geometry, Data Type: String, Cardinality: 0..1, Remarks: Geometry as per clause 4.10 [Defines geometries using GeoJSON format - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon]. It is part of geoquery.
mcp.query.geometryProperty=Name: geometryProperty, Data Type: String, Cardinality: 0..1, Remarks: It represents a Property name. In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the top-level geometry field.
mcp.query.geoproperty=Name: geoproperty, Data Type: String, Cardinality: 0..1, Remarks: It represents the name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7 [Location property - Standard property for representing a geospatial location]).
mcp.query.georel=Name: georel, Data Type: String, Cardinality: 0..1, Remarks: Geo relationship as per clause 4.10 [Defines geo relationships such as: near, within, contains, intersects, equals, disjoint, overlaps]. It is part of geoquery.
mcp.query.id=Name: id, Data Type: Comma separated list of strings, Cardinality: 0..1, Remarks: Each String shall be a valid URI. List of entity ids to be retrieved.
mcp.query.idPattern=Name: idPattern, Data Type: Regular expression as defined by [11], Cardinality: 0..1, Remarks: Regular expression that shall be matched by entity ids. Uses ECMAScript regular expression dialect as defined in ECMA-262.
mcp.query.join=Name: join, Data Type: String, Cardinality: 0..1, Remarks: The type of Linked Entity retrieval to mcply (see clause 4.5.23 [Linked Entity retrieval - Defines methods to fetch entities that are linked through relationships]). Allowed values: "flat", "inline", "@none".
mcp.query.joinLevel=Name: joinLevel, Data Type: Positive Integer, Cardinality: 0..1, Remarks: Depth of Linked Entity retrieval to mcply. Only mcplicable if join parameter is present.
mcp.query.jsonKeys=Name: jsonKeys, Data Type: Comma separated list of strings, Cardinality: 0..1, Remarks: Each String is an Attribute (Property or Relationship) name. Values of the identified attributes are to be considered uninterpretable as JSON-LD and should not be expanded against the supplied @context using JSON-LD type coercion prior to executing the query.
mcp.query.lang=Name: lang, Data Type: String, Cardinality: 0..1, Remarks: It represents the preferred natural language of the response. It is used to reduce languageMaps to a string or string array property in a single preferred language.
mcp.query.omit=Name: omit, Data Type: Comma separated list of strings, Cardinality: 0..1, Remarks: Each String is an Entity member ("id", "type", "scope" or a projected Attribute name). When defined, the listed Entity members are removed from each Entity within the payload.
mcp.query.pick=Name: pick, Data Type: Comma separated list of strings, Cardinality: 0..1, Remarks: Each String is an Entity member ("id", "type", "scope" or a projected Attribute name). When defined, every Entity within the payload body is reduced down to only contain the listed Entity members.
mcp.query.q=Name: q, Data Type: String, Cardinality: 0..1, Remarks: Query as per clause 4.9 [Query Language - Defines a simple query language for NGSI-LD with operators like ==, !=, >, >=, <, <=, and logical operators like ;, |]. ABNF definition: Query = (QueryTerm / QueryTermAssoc) *(LogicalOp  (QueryTerm / QueryTermAssoc)) QueryTermAssoc = %x28 QueryTerm *(LogicalOp  QueryTerm) %x29 ; (QueryTerm) QueryTerm = Attribute QueryTerm =/ Attribute Operator ComparableValue QueryTerm =/ Attribute equal CompEqualityValue QueryTerm =/ Attribute unequal CompEqualityValue QueryTerm =/ Attribute patternOp RegExp QueryTerm =/ Attribute notPatternOp RegExp Attribute = LinkedEntityRelation LinkedEntityRelation = AttrName %x7B LinkedEntityPath %x7D ; AttrName{LinkedEntityPath} LinkedEntityRelation =/ ValuePath LinkedEntityPath = *1(EntityType 1*(%x2C EntityType) %x3A) AttrName %x7B LinkedEntityPath %x7D LinkedEntityPath =/ ValuePath ValuePath = DottedPath *1(%x5B DottedPath %x5D) ; DottedPath *1([DottedPath]) DottedPath = AttrName *(%x2E AttrName) ; AttrName *(.AttrName) Operator = equal / unequal / greaterEq / greater / lessEq / less ComparableValue = Number / quotedStr / dateTime / date / time OtherValue = false / true Value = ComparableValue / OtherValue Range = ComparableValue dots ComparableValue ValueList = Value 1*(%x2C Value) ; Value 1*(, Value) CompEqualityValue = OtherValue / ValueList / Range / URI equal = %x3D %x3D ; == unequal = %x21 %x3D ; != greater = %x3E ; > greaterEq = %x3E %x3D ; >= less = %x3C ; < lessEq = %x3C %x3D ; <= patternOp = %x7E %x3D ; ~= notPatternOp = %x21 %x7E %x3D ; !=~ dots = %x2E %x2E ; ..
mcp.query.scopeQ=Name: scopeQ, Data Type: String, Cardinality: 0..1, Remarks: Scope query (see clause 4.19 [Scopes and Scope Query Language - Defines a way to group entities and filter them by categories or domains]).
mcp.query.type=Name: type, Data Type: String, Cardinality: 0..1, Remarks: Selection of Entity Types as per clause 4.17 [Entity Type Selection - Allows for filtering entities based on their types including subtypes]. "*" is also allowed as a value and local is implicitly set to true and shall not be explicitly set to false.
mcp.additionalinstructions=Each attribute can have a subfield observedAt in the format <YYYY>-<MM>-<DD>T<hh>:<mm>:<ss.ssssss>Z. When the user doesn't provide infos to fill it with now.\
Relationships can have an objectType entry refering to the type of the entity the relationship points to. Fill it when possible.\
When creating or updating relationships try to make them two ways.\
All kinds of Property and ListProperty can have a sub field unitCode. Fill it when possible.\
Attributes can have multiple full entries but then need a datasetId sub field on each entry to unique identify the entry for the attribute. Try to name the datasetId sensible.\
GeoProperties are recorded in lon, lat in NGSI-LD.\
An @context entry SHALL be added to the NGSI-LD payload in case a data model with an existing @context is used, if no @context is used the agent is to provide the core context from ngsi-ld in the @context entry of the payload ("@context": "https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.8.jsonld").
mcp.types.description=Retrieves available NGSI-LD entity types and attributes from the MCP server to ensure the most accurate and contextually relevant response. This method should be called EVERY time the user asks about data or information, as it provides the latest available entity types and attributes that could serve the answer.
mcp.create.description=Creates an NGSI-LD Entity. Can be used to store user provided data or information. Returns an empty String if everything is ok. Returns an error description if something goes wrong. If an entity already exists try updating.
mcp.create.entity=A normalized NGSI-LD Entity. The field id and type are mandatory. Try filling as much as possible. An example for an NGSI-LD entity with all different kinds of attributes which are supported:\
{"id": "urn:test:testentity1",\
"type": "TestType",\
"stringproperty": {"type": "Property", "value": "teststring"},\
"vocabproperty": {"type": "VocabProperty", "vocab": "x"},\
"listproperty": {"type": "ListProperty", "valueList": [100,200,300]},\
"intproperty": {"type": "Property", "value": 123},\
"floatproperty": {"type": "Property", "value": 123.456},\
"complexproperty": {"type": "Property", "value": {"some": {"more": "values"}}},\
"testrelationship": {"type": "Relationship", "object": "urn:testref1"},\
"location": {\
"type": "GeoProperty",\
"value": {\
"type": "Point",\
"coordinates": [80, 80.0005]\
}\
},\
"passenger": {\
"type": "ListRelationship",\
"objectType": "Person",\
"objectList": [\
{"object": "urn:ngsi-ld:Person:Alice"},\
{"object": "urn:ngsi-ld:Person:Bob"}\
]\
},\
"street": {\
"type": "LanguageProperty",\
"languageMap": {\
"fr": "Grand Place",\
"nl": "Grote Markt"\
}\
},\
"testjsonproperty": {\
"type": "JsonProperty",\
"json": {\
"id": "85a6cc52-0589-45f9",\
"value": "Overstay 60 minutes"\
}}}\
${mcp.additionalinstructions}
mcp.update.description=Updates an NGSI-LD Entity. Can be used to update stored user provided data or information. Returns an empty String if everything is ok. Returns an error description if something goes wrong. If an entity does not exist try creating it.
mcp.update.entity=A normalized NGSI-LD Entity fragment. An example for an NGSI-LD entity fragments with all different kinds of attributes which are supported:\
{"stringproperty": {"type": "Property", "value": "teststring"},\
"vocabproperty": {"type": "VocabProperty", "vocab": "x"},\
"listproperty": {"type": "ListProperty", "valueList": [100,200,300]},\
"intproperty": {"type": "Property", "value": 123},\
"floatproperty": {"type": "Property", "value": 123.456},\
"complexproperty": {"type": "Property", "value": {"some": {"more": "values"}}},\
"testrelationship": {"type": "Relationship", "object": "urn:testref1"},\
"location": {\
"type": "GeoProperty",\
"value": {\
"type": "Point",\
"coordinates": [80, 80.0005]\
}\
},\
"passenger": {\
"type": "ListRelationship",\
"objectType": "Person",\
"objectList": [\
{"object": "urn:ngsi-ld:Person:Alice"},\
{"object": "urn:ngsi-ld:Person:Bob"}\
]\
},\
"street": {\
"type": "LanguageProperty",\
"languageMap": {\
"fr": "Grand Place",\
"nl": "Grote Markt"\
}\
},\
"testjsonproperty": {\
"type": "JsonProperty",\
"json": {\
"id": "85a6cc52-0589-45f9",\
"value": "Overstay 60 minutes"\
}}}\
${mcp.additionalinstructions}
mcp.update.updateexistngattrs=Should already existing attributes be updated. Should default to true.
mcp.update.entityid=The entity ID of the entity to be updated
mcp.delete.description=Deletes an NGSI-LD Entity. Returns an empty String if everything is ok. Returns an error description if something goes wrong. If an entity does not exist you will get an entity not found error.
mcp.delete.entityid=The entity ID of the entity to be deleted
mcp.deleteattrib.description=Deletes an attribute from a NGSI-LD Entity. Returns an empty String if everything is ok. Returns an error description if something goes wrong. If an entity does not exist you will get an entity not found error.
mcp.deleteattrib.entityid=The entity ID of the entity to be updated
mcp.deleteattrib.attrib=The attribute name to be deleted
mcp.deleteattrib.datasetid=The datasetId of the entry to be deleted. Used in case of multiple entries in an attribute and only a specific one should be deleted
mcp.deleteattrib.deleteall=Should all entries for this attrib be deleted. If set to false and no datasetId is provided only the entry without a datasetId will be deleted. Valid values are "true" and "false"
mcp.sdm.domains.description=This resource contains an authoritative, up-to-date list of available domains of smart data models for constructing NGSI-LD entities. It MUST be checked every time a user attempts to record or generate data to determine if a matching domain for a data model exists. The result is a comma seperated list of domain names. The Tool MUST be followed by getAvailableDatamodels if a matching domain is found.
mcp.sdm.datamodels.description=This resource contains an authoritative, up-to-date list of available data models filtered by domain for constructing NGSI-LD entities. It MUST be checked every time a user attempts to record or generate data to determine if a matching data model exists. Each JSON object in this file provides the following fields: 'dataModels' (listing all available data models), 'domains' (the applicable domains), 'repoName' (the repository name containing the models), 'repoLink' (a URL directing to the data model repository), and '@context' (the @context for data models from this repo to be used). Be sure that, when generating output, the system (and by extension, Claude) consults this resource to correlate and align the user’s input with the best fitting data model, enhancing data accuracy and compliance.
mcp.sdm.datamodels.domain=The domain for which to retrieve data models
mcp.sdm.datamodel.description=Provides access to json schema describing the requested data model
mcp.sdm.datamodel.reponame=the name of the repository containing the data model
mcp.sdm.datamodel.datamodelname=the name of the data model
mcp.geotools.address2coordinates.description=Provides GeoJSON compliant polygon or point coordinates for a given address. Returns an empty string if the address can't be found.
mcp.geotools.address2coordinates.address=The address to look up. Only letters and numbers are allowed in the input. A plus has to be used to concat search terms. Whitespaces are not allowed. ONLY use parts of the address to search.